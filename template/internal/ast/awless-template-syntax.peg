# PEG for awless template syntax
package ast

type Peg Peg {
 *AST
}

Script   <- (BlankLine* Statement BlankLine*)+ WhiteSpacing EndOfFile
Statement <- WhiteSpacing (CmdExpr / Declaration / Comment) WhiteSpacing EndOfLine*
Action <- [a-z]+
Entity <- [a-z0-9]+
Declaration <- <Identifier> { p.addDeclarationIdentifier(text) }
               Equal
               ( CmdExpr / ValueExpr )
ValueExpr <- { p.addValue() } NoRefValue { p.LineDone() }
CmdExpr <- <Action> { p.addAction(text) }
        MustWhiteSpacing <Entity> { p.addEntity(text) }
        (MustWhiteSpacing Params)? { p.LineDone() }

Params <- Param+
Param <- <Identifier> { p.addParamKey(text) }
         Equal
         Value
         WhiteSpacing

Identifier <- [a-zA-Z0-9-_.]+

NoRefValue <- HoleValue {  p.addParamHoleValue(text) }
        / AliasValue {  p.addAliasParam(text) }
        / DoubleQuote CustomTypedValue DoubleQuote
        / SingleQuote CustomTypedValue SingleQuote
        / CustomTypedValue
        / DoubleQuote <DoubleQuotedValue> { p.addParamValue(text) } DoubleQuote
        / SingleQuote <SingleQuotedValue> { p.addParamValue(text) } SingleQuote
        / <IntValue> { p.addParamIntValue(text) }
        / <StringValue> { p.addParamValue(text) }

Value <- RefValue {  p.addParamRefValue(text) }
      / NoRefValue
        
CustomTypedValue <- <CidrValue> { p.addParamCidrValue(text) }
        / <IpValue> { p.addParamIpValue(text) }
        / <CSVValue> {p.addCsvValue(text)}
        / <IntRangeValue> { p.addParamValue(text) }

StringValue <- [a-zA-Z0-9-._:/+;~@<>]+ # This regex is in sync with template/internal/ast.simpleStringValue


DoubleQuotedValue <- [^"]*
SingleQuotedValue <- [^']*

CSVValue <- (StringValue WhiteSpacing ',' WhiteSpacing)+ StringValue
CidrValue <- [0-9]+.[0-9]+.[0-9]+.[0-9]+'/'[0-9]+
IpValue <- [0-9]+.[0-9]+.[0-9]+.[0-9]+
IntValue <- [0-9]+
IntRangeValue <- [0-9]+'-'[0-9]+

RefValue <- '$'<Identifier>
AliasValue <- '@'<StringValue> / '@' DoubleQuote <DoubleQuotedValue> DoubleQuote / '@' SingleQuote <SingleQuotedValue> SingleQuote 
HoleValue <- '{'WhiteSpacing<Identifier>WhiteSpacing'}'

Comment <- '#'(!EndOfLine .)* / '//'(!EndOfLine .)* { p.LineDone() }

SingleQuote <- '\''
DoubleQuote <- '"'

WhiteSpacing <- Whitespace*
MustWhiteSpacing <- Whitespace+
Equal <- WhiteSpacing '=' WhiteSpacing
BlankLine <- WhiteSpacing EndOfLine { p.LineDone() }
Whitespace   <- ' ' / '\t'
EndOfLine <- '\r\n' / '\n' / '\r'
EndOfFile <- !.
